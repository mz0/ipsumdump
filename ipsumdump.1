.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IPSUMDUMP 1"
.TH IPSUMDUMP 1 "2015-02-22" "Version 1.86" " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ipsumdump \- produce ASCII summary of network traffic or tcpdump(1) trace
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ipsumdump [\fB\-r\fR | \fB\-i\fR | ...] [\fB\-\-src\fR, \fB\-\-dst\fR, \fB\-\-sport\fR, \fB\-\-dport\fR, ...] [other options] [\fIfiles\fR or \fIinterfaces\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBipsumdump\fR program reads \s-1IP\s0 packets from one or more data sources,
then summarizes those packets into a line-based \s-1ASCII\s0 file. The resulting
summary dump is easy to process with text-based tools. (But see the
\&\fB\-\-binary\fR option, which generates a smaller binary file.)
.PP
Here are a couple lines of \fBipsumdump\fR output, from 'ipsumdump \-sd
/home/kohler/largedump.gz':
.PP
.Vb 7
\&  !IPSummaryDump 1.3
\&  !creator "ipsumdump \-sd /home/kohler/largedump.gz"
\&  !host max.lcdf.org
\&  !runtime 1000943858.353723 (Wed Sep 19 16:57:38 2001)
\&  !data ip_src ip_dst
\&  64.55.139.202 209.247.204.242
\&  18.26.4.9 64.55.139.202
.Ve
.PP
The '\fB\-sd\fR' option, which is equivalent to '\fB\-\-src \-\-dst\fR', tells
\&\fBipsumdump\fR to log \fIs\fRource and \fId\fRestination \s-1IP\s0 addresses.
\&'\fI/home/kohler/largedump.gz\fR' is a compressed \fItcpdump\fR\|(1) file. Each data
line represents a packet; a space separates the two addresses. The
\&\f(CW\*(C`!data\*(C'\fR comment describes the contents of each data line.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Source Options"
.IX Subsection "Source Options"
Source options tell \fBipsumdump\fR what kind of data source to use:
\&\fItcpdump\fR\|(1) raw-packet files (\fB\-\-tcpdump\fR), live network interfaces
(\fB\-\-interface\fR), NetFlow summary files (\fB\-\-netflow\-summary\fR),
\&\fBipsumdump\fR output files (\fB\-\-ipsumdump\fR), \s-1DAG\s0 or NLANR-formatted files
(\fB\-\-dag\fR, \fB\-\-nlanr\fR), or others.
.PP
Non-option arguments specify the files, or interfaces, to read. For
example, 'ipsumdump \fB\-r\fR eth0 eth1' will read two \fItcpdump\fR\|(1) files, named
\&\*(L"eth0\*(R" and \*(L"eth1\*(R"; 'ipsumdump \fB\-i\fR eth0 eth1' will read from two live
network interfaces, \*(L"eth0\*(R" and \*(L"eth1\*(R".
.PP
Options that read files read from the standard input when you supply a
single dash \f(CW\*(C`\-\*(C'\fR as a filename, or when you give no filenames at all.
.IP "\fB\-\-tcpdump\fR, \fB\-r\fR" 4
.IX Item "--tcpdump, -r"
Read from one or more files produced by \fItcpdump\fR\|(1)'s \fB\-w\fR option (also
known as \*(L"pcap files\*(R"). Stop when all the files are exhausted. This is the
default. Files (except for standard input) may be compressed by \fIgzip\fR\|(1) or
\&\fIbzip2\fR\|(1); \fBipsumdump\fR will uncompress them on the fly.
.IP "\fB\-\-interface\fR, \fB\-i\fR" 4
.IX Item "--interface, -i"
Read from live network interfaces. When run this way, \fBipsumdump\fR will
continue until interrupted with \s-1SIGINT\s0 or \s-1SIGHUP.\s0 When stopped,
\&\fBipsumdump\fR appends a comment to its output file, indicating how many
packets were dropped by the kernel before output.
.IP "\fB\-\-ipsumdump\fR" 4
.IX Item "--ipsumdump"
Read from one or more \fBipsumdump\fR files. Any packet characteristics not
specified by the input files are set to 0.
.IP "\fB\-\-format\fR=\fIformat\fR" 4
.IX Item "--format=format"
Read from one or more \fBipsumdump\fR files, using the specified default
format.  The \fIformat\fR should be a space-separated list of content types;
see ToIPSummaryDump(n) for a list.
.IP "\fB\-\-dag\fR[=\fIencap\fR]" 4
.IX Item "--dag[=encap]"
Read from one or more DAG-formatted trace files.  For new-style \s-1ERF\s0 dumps,
which contain encapsulation type information, just say \fB\-\-dag\fR.  For
old-style dumps, you must supply the right \fIencap\fR argument: \f(CW\*(C`ATM\*(C'\fR for
\&\s-1ATM RFC\-1483\s0 encapsulation (the most common), \f(CW\*(C`ETHER\*(C'\fR for Ethernet, \f(CW\*(C`PPP\*(C'\fR
for \s-1PPP, \s0\f(CW\*(C`IP\*(C'\fR for raw \s-1IP, \s0\f(CW\*(C`HDLC\*(C'\fR for Cisco \s-1HDLC, \s0\f(CW\*(C`PPP_HDLC\*(C'\fR for \s-1PPP
HDLC,\s0 or \f(CW\*(C`SUNATM\*(C'\fR for Sun \s-1ATM. \s0 See <http://dag.cs.waikato.ac.nz/>.
.IP "\fB\-\-nlanr\fR" 4
.IX Item "--nlanr"
Read from one or more NLANR-formatted trace files (fr, fr+, or tsh
format).  See <http://pma.nlanr.net/Traces/>.
.IP "\fB\-\-netflow\-summary\fR" 4
.IX Item "--netflow-summary"
Read from one or more NetFlow summary files. These are line-oriented \s-1ASCII\s0
files; blank lines, and lines starting with '!' or '#', are ignored. Other
lines should contain 15 or more fields separated by vertical bars '|'.
\&\fBIpsumdump\fR pays attention to some of these fields:
.Sp
.Vb 10
\&  Field  Meaning                       Example
\&  \-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-
\&  0      Source IP address             192.4.1.32
\&  1      Destination IP address        18.26.4.44
\&  5      Packet count in flow          5
\&  6      Byte count in flow            10932
\&  7      Flow timestamp (UNIX\-style)   998006995
\&  8      Flow end timestamp            998006999
\&  9      Source port                   3917
\&  10     Destination port              80
\&  12     TCP flags (OR of all pkts)    18
\&  13     IP protocol                   6
\&  14     IP TOS bits                   0
.Ve
.IP "\fB\-\-tcpdump\-text\fR" 4
.IX Item "--tcpdump-text"
Read from one or more files containing \fItcpdump\fR\|(1) textual output.  It's
much better to use the binary files produced by 'tcpdump \fB\-w\fR', but if
someone threw those away and all you have is the \s-1ASCII\s0 output, you can
still make do.  Only works with tcpdump versions 3.7 and earlier.
.SS "Data Options"
.IX Subsection "Data Options"
These options determine the dump's contents. Each data option adds a field
to the output file; you can supply any number of data options. In the
output, fields are separated by spaces. If you say '\fB\-sd\fR',
or the equivalent '\fB\-\-src \-\-dst\fR', the dump's data lines will contain an
\&\s-1IP\s0 source address, a space, and an \s-1IP\s0 destination address:
.PP
.Vb 1
\&    192.168.1.101 18.26.4.44
.Ve
.PP
If you supply no dump content options, \fBipsumdump\fR will not create a
summary dump. This may be useful if you're only interested in creating a
tcpdump file with \fB\-\-write\-tcpdump\fR.
.PP
\fIGeneric Options\fR
.IX Subsection "Generic Options"
.IP "\fB\-\-timestamp\fR, \fB\-t\fR" 4
.IX Item "--timestamp, -t"
Include packet timestamp in the dump. Example: \f(CW1000212480.005813\fR. For
NetFlow summary input, the packet timestamp equals the flow-end timestamp.
The timestamp has nanosecond precision when input timestamps had nanosecond
precision.
.IP "\fB\-\-first\-timestamp\fR, \fB\-T\fR" 4
.IX Item "--first-timestamp, -T"
Include flow-begin timestamp in the dump. Example: \f(CW1000212479.001937\fR.
This is meaningful only for packet sources that include flow-begin
timestamps, such as NetFlow summaries.
.IP "\fB\-\-packet\-count\fR, \fB\-c\fR" 4
.IX Item "--packet-count, -c"
Include packet count in the dump.  Some kinds of logs \*(-- such as NetFlow
summary logs \*(-- record information about flows, not packets.  A flow
represents multiple packets; the packet count says exactly how many. 
Example: \f(CW1\fR.  See also \fB\-\-multipacket\fR, below.
.IP "\fB\-\-wire\-length\fR" 4
.IX Item "--wire-length"
Include wire length in the dump.  This is the packet's length in the
capture file, including any link headers and packet trailers.  This is
usually larger than \fB\-\-length\fR, which returns the \s-1IP\s0 length.
.IP "\fB\-\-link\fR" 4
.IX Item "--link"
Include the link number in the dump.  TSH-format \s-1NLANR\s0 logs, NetFlow
summary logs, and some \s-1IP\s0 summary logs can contain a link number.  Example:
\&\f(CW2\fR.  For NetFlow summary logs, \fB\-\-link\fR uses the input interface number.
.PP
\fIEthernet Options\fR
.IX Subsection "Ethernet Options"
.IP "\fB\-\-eth\-src\fR" 4
.IX Item "--eth-src"
Include the Ethernet source address in the dump.  Example:
\&\f(CW\*(C`00\-0A\-95\-A6\-D9\-BC\*(C'\fR.  Note that Ethernet addresses are only printed for \s-1IP\s0
packets.
.IP "\fB\-\-eth\-dst\fR" 4
.IX Item "--eth-dst"
Include the Ethernet destination address in the dump.  Example:
\&\f(CW\*(C`00\-0A\-95\-A6\-D9\-BC\*(C'\fR.  Note that Ethernet addresses are only printed for \s-1IP\s0
packets.
.PP
\fI\s-1IP\s0 Options\fR
.IX Subsection "IP Options"
.IP "\fB\-\-src\fR, \fB\-s\fR" 4
.IX Item "--src, -s"
Include \s-1IP\s0 source address in the dump. Example: \f(CW192.168.1.101\fR.
.IP "\fB\-\-dst\fR, \fB\-d\fR" 4
.IX Item "--dst, -d"
Include \s-1IP\s0 destination address in the dump. Example: \f(CW18.26.4.44\fR.
.IP "\fB\-\-length\fR, \fB\-l\fR" 4
.IX Item "--length, -l"
Include \s-1IP\s0 packet length in the dump, not including any link-level headers.
Example: \f(CW72\fR.  See also \fB\-\-wire\-length\fR.
.IP "\fB\-\-protocol\fR, \fB\-p\fR" 4
.IX Item "--protocol, -p"
Include \s-1IP\s0 protocol in the dump. Can be \f(CW\*(C`T\*(C'\fR for \s-1TCP, \s0\f(CW\*(C`U\*(C'\fR for \s-1UDP,
\&\s0\f(CW\*(C`I\*(C'\fR for \s-1ICMP,\s0 or a number for some other protocol.
.IP "\fB\-\-fragment\fR, \fB\-g\fR" 4
.IX Item "--fragment, -g"
Include \s-1IP\s0 fragment test in the dump. The field value is \f(CW\*(C`F\*(C'\fR for first
fragments, \f(CW\*(C`f\*(C'\fR for second and subsequent fragments, and \f(CW\*(C`.\*(C'\fR (a single
period) for nonfragments.
.IP "\fB\-\-fragment\-offset\fR, \fB\-\-fragoff\fR, \fB\-G\fR" 4
.IX Item "--fragment-offset, --fragoff, -G"
Include \s-1IP\s0 fragment offset in the dump. The field value is the fragment
offset in bytes, possibly followed by a \f(CW\*(C`+\*(C'\fR suffix, indicating the
\&\s-1MF \s0(more fragments) flag. Examples: \f(CW\*(C`0+\*(C'\fR (fragment offset 0, more fragments
forthcoming), \f(CW552\fR (fragment offset 552, this is the last fragment).
.IP "\fB\-\-ip\-id\fR" 4
.IX Item "--ip-id"
Include \s-1IP ID\s0 field in the dump. Example: \f(CW19371\fR.
.IP "\fB\-\-ip\-sum\fR" 4
.IX Item "--ip-sum"
Include \s-1IP\s0 checksum in the dump.  Example: \f(CW34987\fR.
.IP "\fB\-\-ip\-opt\fR" 4
.IX Item "--ip-opt"
Include \s-1IP\s0 options in the dump. Single \s-1IP\s0 option fields have the following
representations:
.Sp
.Vb 2
\&    EOL, NOP        Not written, but FromIPSummaryDump
\&                    understands \*(Aqeol\*(Aq and \*(Aqnop\*(Aq
\&    
\&    RR              \*(Aqrr{10.0.0.1,20.0.0.2}+5\*(Aq (addresses
\&                    inside the braces come before the
\&                    pointer; \*(Aq+5\*(Aq means there is space for
\&                    5 more addresses after the pointer)
\&    
\&    SSRR, LSRR      \*(Aqssrr{1.0.0.1,1.0.0.2^1.0.0.3}\*(Aq
\&                    (\*(Aq^\*(Aq indicates the pointer)
\&    
\&    TS              \*(Aqts{1,10000,!45}+2++3\*(Aq (timestamps only
\&                    [type 0]; timestamp values 1, 10000,
\&                    and 45 [but 45 has the "nonstandard
\&                    timestamp" bit set]; the option has
\&                    room for 2 more timestamps; the
\&                    overflow counter is set to 3)
\&                    
\&                    \*(Aqts.ip{1.0.0.1=1,1.0.0.2=2}+5\*(Aq
\&                    (timestamps with IP addresses [type 1])
\&    
\&                    \*(Aqts.preip{1.0.0.1=1^1.0.0.2,1.0.0.3}\*(Aq
\&                    (prespecified IP addresses [type 3];
\&                    the caret is the pointer)
\&                    
\&    Other options   \*(Aq98\*(Aq (option 98, no data),
\&                    \*(Aq99=0:5:10\*(Aq (option with data, data
\&                    octets separated by colons)
.Ve
.Sp
Multiple options are separated by semicolons. Any invalid option causes the
entire field to be replaced by a single question mark \f(CW\*(C`?\*(C'\fR. A period
\&\f(CW\*(C`.\*(C'\fR is used for packets with no options (except possibly \s-1EOL\s0 and \s-1NOP\s0).
.IP "\fB\-\-ip\-ttl\fR" 4
.IX Item "--ip-ttl"
Include the \s-1IP\s0 time-to-live field in the dump.
.IP "\fB\-\-ip\-tos\fR" 4
.IX Item "--ip-tos"
Include the \s-1IP\s0 type of service field in the dump.
.IP "\fB\-\-ip\-hl\fR" 4
.IX Item "--ip-hl"
Include the \s-1IP\s0 header length in the dump.  The length is measured in bytes.
.IP "\fB\-\-capture\-length\fR" 4
.IX Item "--capture-length"
Include the length of captured \s-1IP\s0 data in the dump. This can be less than
the full \s-1IP\s0 length (see \fB\-\-length\fR), since many packet capture programs
will store only part of each packet's data.
.PP
\fITransport Options\fR
.IX Subsection "Transport Options"
.IP "\fB\-\-sport\fR, \fB\-S\fR" 4
.IX Item "--sport, -S"
Include \s-1TCP\s0 or \s-1UDP\s0 source port in the dump. Example: \f(CW8928\fR. For non-TCP
or \s-1UDP\s0 packets, and for fragments after the first, this field is a single
dash \f(CW\*(C`\-\*(C'\fR.
.IP "\fB\-\-dport\fR, \fB\-D\fR" 4
.IX Item "--dport, -D"
Include \s-1TCP\s0 or \s-1UDP\s0 destination port in the dump. Example: \f(CW80\fR.
.IP "\fB\-\-payload\-length\fR, \fB\-L\fR" 4
.IX Item "--payload-length, -L"
Include length of packet payload in the dump. This is the length of the \s-1TCP\s0
or \s-1UDP\s0 payload, for \s-1TCP\s0 or \s-1UDP\s0 packets, or the length of the \s-1IP\s0 payload,
for other \s-1IP\s0 packets. Example: \f(CW1000\fR.
.IP "\fB\-\-payload\fR" 4
.IX Item "--payload"
Include the actual packet payload in the dump. This is the \s-1TCP\s0 or \s-1UDP\s0
payload, for \s-1TCP\s0 or \s-1UDP\s0 packets, or the \s-1IP\s0 payload, for other \s-1IP\s0 packets.
Output as a double-quoted C string; non-ASCII characters, and double-quotes
and backslashes, appear as C backslash escapes. Example: \f(CW",25\er\en\e000"\fR.
.IP "\fB\-\-payload\-md5\fR" 4
.IX Item "--payload-md5"
Include an \s-1MD5\s0 checksum of the packet payload in the dump. The payload is
as defined above. In \s-1ASCII\s0 output, the output is a 22\-character string
consisting of characters [a\-zA\-Z0\-9_@]; in binary output, it's a
16\-character binary digest. Example: \f(CW\*(C`sQy@IjqXnFPwZtgtwaC5Hb\*(C'\fR.
.IP "\fB\-\-payload\-md5\-hex\fR" 4
.IX Item "--payload-md5-hex"
Like \fB\-\-payload\-md5\fR, but in \s-1ASCII\s0 output, the checksum is printed as 32
hexadecimal digits (the same format used by \fBmd5sum\fR). Example:
\&\f(CW\*(C`12f6bb1941df66b8f138a446d4e8670c\*(C'\fR.
.PP
\fI\s-1TCP\s0 Options\fR
.IX Subsection "TCP Options"
.PP
\&\s-1TCP\s0 header fields equal a dash \f(CW\*(C`\-\*(C'\fR for non-TCP packets and non-first
fragments.
.IP "\fB\-\-tcp\-flags\fR, \fB\-F\fR" 4
.IX Item "--tcp-flags, -F"
Include \s-1TCP\s0 flags byte in the dump. Each flag is represented by an
uppercase letter. Example: \f(CW\*(C`PA\*(C'\fR (\s-1PSH\s0 and \s-1ACK\s0 are on, everything else is
off). If no flags are on, the field is \f(CW\*(C`.\*(C'\fR (a single period).
.Sp
Flag characters are \f(CW\*(C`F\*(C'\fR for \s-1FIN, \s0\f(CW\*(C`S\*(C'\fR for \s-1SYN, \s0\f(CW\*(C`R\*(C'\fR for \s-1RST, \s0\f(CW\*(C`P\*(C'\fR for \s-1PSH,
\&\s0\f(CW\*(C`A\*(C'\fR for \s-1ACK, \s0\f(CW\*(C`U\*(C'\fR for \s-1URG, \s0\f(CW\*(C`E\*(C'\fR for \s-1ECE \s0(flag bit 6), \f(CW\*(C`C\*(C'\fR for \s-1CWR \s0(flag
bit 7), and \f(CW\*(C`N\*(C'\fR for Nonce Sum (flag bit 8).
.IP "\fB\-\-tcp\-seq\fR, \fB\-Q\fR" 4
.IX Item "--tcp-seq, -Q"
Include \s-1TCP\s0 sequence number in the dump. Example: \f(CW4009339012\fR.
.IP "\fB\-\-tcp\-ack\fR, \fB\-K\fR" 4
.IX Item "--tcp-ack, -K"
Include \s-1TCP\s0 acknowledgement number in the dump. Example: \f(CW4009339012\fR.
.IP "\fB\-\-tcp\-window\fR, \fB\-W\fR" 4
.IX Item "--tcp-window, -W"
Include \s-1TCP\s0 receive window in the dump.  This value is not scaled by the
connection's window scale, if any.  Example: \f(CW480\fR.
.IP "\fB\-\-tcp\-opt\fR, \fB\-O\fR" 4
.IX Item "--tcp-opt, -O"
Include \s-1TCP\s0 options in the dump. Single \s-1TCP\s0 option fields have the
following representations:
.Sp
.Vb 10
\&    EOL, NOP        No representation
\&    MSS             \*(Aqmss1400\*(Aq
\&    Window scale    \*(Aqwscale10\*(Aq
\&    SACK permitted  \*(Aqsackok\*(Aq
\&    SACK            \*(Aqsack95\-98\*(Aq; each SACK block
\&                    is listed separately
\&    Timestamp       \*(Aqts669063908:38382731\*(Aq
\&    Other options   \*(Aq98\*(Aq (option 98, no data),
\&                    \*(Aq99=0:5:10\*(Aq (option with data, data
\&                    octets separated by colons)
.Ve
.Sp
Multiple options are separated by semicolons. Any invalid option causes the
entire field to be replaced by a single question mark \f(CW\*(C`?\*(C'\fR. A period
\&\f(CW\*(C`.\*(C'\fR is used for packets with no options (except possibly \s-1EOL\s0 and \s-1NOP\s0).
.IP "\fB\-\-tcp\-sack\fR" 4
.IX Item "--tcp-sack"
Include SACK-related \s-1TCP\s0 options in the dump, using the format given under
\&\f(CW\*(C`\-\-tcp\-opt\*(C'\fR, above.
.PP
\fI\s-1UDP\s0 Options\fR
.IX Subsection "UDP Options"
.PP
\&\s-1UDP\s0 header fields equal a dash \f(CW\*(C`\-\*(C'\fR for non-UDP packets and non-first
fragments.
.IP "\fB\-\-udp\-length\fR" 4
.IX Item "--udp-length"
Include \s-1UDP\s0 length in the dump. This is the length reported in the \s-1UDP\s0
packet header. Example: \f(CW1000\fR.
.PP
\fI\s-1ICMP\s0 Options\fR
.IX Subsection "ICMP Options"
.PP
\&\s-1ICMP\s0 header fields equal a dash \f(CW\*(C`\-\*(C'\fR for non-ICMP packets and non-first
fragments.
.IP "\fB\-\-icmp\-type\fR" 4
.IX Item "--icmp-type"
Include \s-1ICMP\s0 type in the dump. Example: \f(CW3\fR. A dash is output for non-ICMP
packets.
.IP "\fB\-\-icmp\-code\fR" 4
.IX Item "--icmp-code"
Include \s-1ICMP\s0 code in the dump. Example: \f(CW8\fR.
.IP "\fB\-\-icmp\-type\-name\fR" 4
.IX Item "--icmp-type-name"
Include \s-1ICMP\s0 type in the dump, using textual names if known. Examples:
\&\f(CW\*(C`echo\*(C'\fR, \f(CW\*(C`echo\-reply\*(C'\fR, \f(CW100\fR.
.IP "\fB\-\-icmp\-code\-name\fR" 4
.IX Item "--icmp-code-name"
Include \s-1ICMP\s0 code in the dump, using textual names if known. Examples:
\&\f(CW\*(C`filterprohibited\*(C'\fR, \f(CW\*(C`srcroutefail\*(C'\fR, \f(CW\*(C`reassembly\*(C'\fR, \f(CW97\fR.
.SS "Other Options"
.IX Subsection "Other Options"
.IP "\fB\-\-output\fR=\fIfile\fR, \fB\-o\fR \fIfile\fR" 4
.IX Item "--output=file, -o file"
Write the summary dump to \fIfile\fR instead of to the standard output.
.IP "\fB\-\-binary\fR, \fB\-b\fR" 4
.IX Item "--binary, -b"
Write the summary dump in binary format. See below for more information.
.IP "\fB\-\-write\-tcpdump\fR=\fIfile\fR, \fB\-w\fR \fIfile\fR" 4
.IX Item "--write-tcpdump=file, -w file"
Write processed packets to a \fItcpdump\fR\|(1) \fIfile\fR \*(-- or to the standard
output, if \fIfile\fR is a single dash \f(CW\*(C`\-\*(C'\fR \*(-- in addition to the usual
summary output.  Options including \fB\-\-filter\fR and dump contents require
\&\s-1IP\s0; in the presence of these options, the output \fItcpdump\fR\|(1) \fIfile\fR will
contain only \s-1IP\s0 packets.  (\s-1ARP\s0 packets, for example, will not be written.)
.IP "\fB\-\-no\-tcpdump\-nano\fR" 4
.IX Item "--no-tcpdump-nano"
The file written for \fB\-\-write\-tcpdump\fR will use microsecond-precision
timestamps, rather than nonsecond-precision timestamps (the default).
.IP "\fB\-\-no\-payload\fR" 4
.IX Item "--no-payload"
Do not include \s-1IP\s0 packet payloads in any \fB\-\-write\-tcpdump\fR output.
.IP "\fB\-\-filter\fR=\fIfilter\fR, \fB\-f\fR \fIfilter\fR" 4
.IX Item "--filter=filter, -f filter"
Only include packets and flows matching a \fItcpdump\fR\|(1) filter. For example,
\&'ipsumdump \fB\-f\fR \*(L"tcp && src net 18/8\*(R"' will summarize data only for \s-1TCP\s0
packets from net 18. (The syntax for \fIfilter\fR is currently a subset of
tcpdump's syntax.)
.IP "\fB\-\-bad\-packets\fR" 4
.IX Item "--bad-packets"
Print lines like \f(CW\*(C`!bad IP header length 4\*(C'\fR for packets with no \s-1IP\s0
headers, bad \s-1IP\s0 headers, or bad \s-1TCP/UDP\s0 headers. (A bad header has an
incorrect length or unexpected version, or is spread across multiple
fragments.)  The \f(CW\*(C`!bad\*(C'\fR line will immediately precede the normal output
line.  Whether or not \fB\-\-bad\-packets\fR is true, a dash \f(CW\*(C`\-\*(C'\fR is printed
for any piece of information that came from a bad header, or that came from
a portion of the header that was not captured.
.IP "\fB\-\-anonymize\fR, \fB\-A\fR" 4
.IX Item "--anonymize, -A"
Anonymize \s-1IP\s0 addresses in the output. The anonymization preserves prefix
and class. This means, first, that two anonymized addresses will share the
same prefix when their non-anonymized counterparts share the same prefix;
and second, that anonymized addresses will be in the same class (A, B, C,
or D) as their non-anonymized counterparts. The anonymization algorithm
comes from \fItcpdpriv\fR\|(1); it works like 'tcpdpriv \fB\-A50 \-C4\fR'.
.Sp
If \fB\-\-anonymize\fR and \fB\-\-write\-tcpdump\fR are both on, the \fBtcpdump\fR output
file will have anonymized \s-1IP\s0 addresses. However, the file will contain
actual packet data, unlike \fBtcpdpriv\fR output.
.IP "\fB\-\-no\-promiscuous\fR" 4
.IX Item "--no-promiscuous"
Do not place interfaces into promiscuous mode. Promiscuous mode is the
default.
.IP "\fB\-\-sample\fR=\fIp\fR" 4
.IX Item "--sample=p"
Sample packets with probability \fIp\fR. That is, \fIp\fR is the chance that a
packet will cause output to be generated. The actual probability may differ
from the specified probability, due to fixed point arithmetic; check the
output for a \f(CW\*(C`!sampling_prob\*(C'\fR comment to see the real probability.
Strictly speaking, this option samples records, not packets; so for NetFlow
summaries without \fB\-\-multipacket\fR, it will sample flows.
.IP "\fB\-\-multipacket\fR" 4
.IX Item "--multipacket"
Supply this option if you are reading NetFlow or \s-1IP\s0 summaries \*(-- files
where each record might represent multiple packets \*(-- and you would like
the output summary to have one line per packet, instead of the default one
line per record. See also \fB\-\-packet\-count\fR, above.
.IP "\fB\-\-collate\fR" 4
.IX Item "--collate"
Sort output packets by increasing timestamp. Use this option when reading
from multiple \fItcpdump\fR\|(1) files to ensure that the output has sorted
timestamps. Combine \fB\-\-collate\fR with \fB\-\-write\-tcpdump\fR to collate
overlapping \fItcpdump\fR\|(1) files into a single, sorted \fItcpdump\fR\|(1) file.
.IP "\fB\-\-interval\fR=\fItime\fR" 4
.IX Item "--interval=time"
Process packets for \fItime\fR, an interval length in seconds (or give a
suffix like '2m' or '1hr'). For \fB\-\-interface\fR, \fBipsumdump\fR will
quit after it has run for \fItime\fR. For other options, \fBipsumdump\fR will
quit before writing a packet whose timestamp is more than \fItime\fR seconds
later than the timestamp on the first packet it sees.
.IP "\fB\-\-skip\-packets\fR=\fIcount\fR" 4
.IX Item "--skip-packets=count"
Skip the first \fIcount\fR packets.
.IP "\fB\-\-limit\-packets\fR=\fIcount\fR" 4
.IX Item "--limit-packets=count"
Output at most \fIcount\fR packets, then quit.
.IP "\fB\-\-map\-address\fR=\fIaddrs\fR" 4
.IX Item "--map-address=addrs"
\&\fIaddrs\fR is a space\- or comma-separated list of \s-1IP\s0 addresses and/or
prefixes. When the summary dump completes, \fBipsumdump\fR will write those
addresses to the standard error, paired with their anonymized counterparts.
.IP "\fB\-\-record\-counts\fR=\fItime\fR" 4
.IX Item "--record-counts=time"
Useful when reading from interfaces. This option causes \fBipsumdump\fR to
write a comment recording the cumulative number of packets output, and the
number of packets dropped by the kernel before \fBipsumdump\fR could process
them, every \fItime\fR seconds. (Or you can say, for example, '2m' for 2
minutes.) A sample comment:
.Sp
.Vb 1
\&  !counts out 0 kdrop 0
.Ve
.Sp
This says that \fBipsumdump\fR has output 0 records, and the kernel reported 0
packet drops since \fBipsumdump\fR began.
.IP "\fB\-\-random\-seed\fR=\fIseed\fR" 4
.IX Item "--random-seed=seed"
Set the random seed deterministically to \fIseed\fR, an unsigned integer. By
default, the random seed is initialized to a random value using
\&\fI/dev/random\fR, if it exists, combined with other data. The random seed
indirectly determines which packets are sampled, and the values of
anonymized \s-1IP\s0 addresses.
.IP "\fB\-\-no\-mmap\fR" 4
.IX Item "--no-mmap"
Do not use memory mapping when reading files. This may prevent crashes if
you feed \fBipsumdump\fR a corrupted file. See \s-1BUGS,\s0 below.
.IP "\fB\-\-quiet\fR, \fB\-q\fR" 4
.IX Item "--quiet, -q"
Do not print a progress bar to standard error. This is the default when
\&\fBipsumdump\fR isn't running interactively.
.IP "\fB\-\-no\-headers\fR" 4
.IX Item "--no-headers"
Do not print the \s-1IP\s0 summary dump header lines that make the dump
self-describing.
.IP "\fB\-\-config\fR" 4
.IX Item "--config"
Do not produce a summary. Instead, write the Click configuration that
\&\fBipsumdump\fR would run to the standard output.
.IP "\fB\-\-verbose\fR, \fB\-V\fR" 4
.IX Item "--verbose, -V"
Produce more verbose error messages.
.IP "\fB\-\-help\fR, \fB\-h\fR" 4
.IX Item "--help, -h"
Print a help message to the standard output, then exit.
.IP "\fB\-\-version\fR, \fB\-v\fR" 4
.IX Item "--version, -v"
Print version number and license information to the standard output, then
exit.
.SH "SIGNALS"
.IX Header "SIGNALS"
When killed with \s-1SIGTERM\s0 or \s-1SIGINT, \s0\fBipsumdump\fR will exit cleanly by
flushing its buffers. If you want it to flush its buffers without exiting,
kill it with \s-1SIGHUP.\s0
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The '\fB\-tsSdDp\fR' option set covers the most commonly useful information
about each packet: timestamp, source address, source port, destination
address, destination port, and protocol. Invoking 'ipsumdump \fB\-i\fR eth1
\&\fB\-tsSdDp\fR' might produce output like this:
.PP
.Vb 11
\&  !IPSummaryDump 1.3
\&  !creator "ipsumdump \-i eth1 \-tsSdDp"
\&  !host max.lcdf.org
\&  !runtime 1000967293.569808 (Wed Sep 19 23:28:13 2001)
\&  !data timestamp ip_src sport ip_dst dport ip_proto
\&  1000967303.641581 64.71.165.130 80 192.168.1.101 4450 T
\&  1000967303.670506 64.71.165.130 80 192.168.1.101 4450 T
\&  1000967303.882621 18.26.4.44 \- 192.168.1.101 \- I
\&  1000967304.253874 64.71.165.130 80 192.168.1.101 4442 T
\&  1000967304.390016 192.150.187.11 53 192.168.1.101 1299 U
\&  1000967304.425992 207.171.182.16 80 192.168.1.101 4451 T
.Ve
.PP
Here is the same data, anonymized with \fB\-A\fR:
.PP
.Vb 11
\&  !IPSummaryDump 1.3
\&  !creator "ipsumdump \-\-ipsumdump \-A \-tsSdDp"
\&  !host max.lcdf.org
\&  !runtime 1000968019.67508 (Wed Sep 19 23:40:19 2001)
\&  !data timestamp ip_src sport ip_dst dport ip_proto
\&  1000967303.641581 29.50.142.215 80 204.196.101.50 4450 T
\&  1000967303.670506 29.50.142.215 80 204.196.101.50 4450 T
\&  1000967303.882621 89.142.236.79 \- 204.196.101.50 \- I
\&  1000967304.253874 29.50.142.215 80 204.196.101.50 4442 T
\&  1000967304.390016 204.224.59.219 53 204.196.101.50 1299 U
\&  1000967304.425992 192.230.64.231 80 204.196.101.50 4451 T
.Ve
.SH "BINARY FORMAT"
.IX Header "BINARY FORMAT"
Binary ipsumdump files begin with several \s-1ASCII\s0 lines, just like regular
ipsumdump files. The line \f(CW\*(C`!binary\*(C'\fR indicates that the rest of the file,
starting immediately after the newline, consists of binary records. Each
record looks like this:
.PP
.Vb 4
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-...
\&   |X|record length|    data
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-...
\&    <\-\-\-4 bytes\-\-\->
.Ve
.PP
The initial word of data contains the record length in bytes. (All numbers
in the file are stored in network byte order.) The record length includes
the initial word itself, so the minimum valid record length is 4. The
high-order bit \f(CW\*(C`X\*(C'\fR is the metadata indicator. It is zero for regular
packets and one for metadata lines.
.PP
Regular packet records have binary fields stored in the order indicated by
the \f(CW\*(C`!data\*(C'\fR line, as follows:
.PP
.Vb 10
\&   Field Name     Length  Description
\&   timestamp         8    timestamp sec, usec
\&   ntimestamp        8    timestamp sec, nsec
\&   first_timestamp   8    timestamp sec, usec
\&   first_ntimestamp  8    timestamp sec, nsec
\&   ip_src            4    source IP address
\&   ip_dst            4    destination IP address
\&   sport             2    source port
\&   dport             2    destination port
\&   ip_len            4    IP length field
\&   ip_proto          1    IP protocol
\&   ip_id             2    IP ID
\&   ip_frag           1    fragment descriptor
\&                          (\*(AqF\*(Aq, \*(Aqf\*(Aq, or \*(Aq.\*(Aq)
\&   ip_fragoff        2    IP fragment offset field
\&   tcp_seq           4    TCP seqnece number
\&   tcp_ack           4    TCP ack number
\&   tcp_flags         1    TCP flags
\&   tcp_opt           ?    TCP options
\&   tcp_sack          ?    TCP SACK options
\&   payload_len       4    payload length
\&   count             4    packet count
.Ve
.PP
Each field is Length bytes long. Variable-length fields have Length \f(CW\*(C`?\*(C'\fR in
the table; in a packet record, these fields consist of a single length byte,
followed by that many bytes of data.
.PP
The data stored in a metadata record is just an \s-1ASCII\s0 string, ending with
newline, same as in a regular \s-1ASCII\s0 IPSummaryDump file. \f(CW\*(C`!bad\*(C'\fR records, for
example, are stored this way.
.SH "CLICK"
.IX Header "CLICK"
The \fBipsumdump\fR program uses the Click modular router, an extensible
system for processing packets. Click routers consist of \*(C+ components
called elements. While some elements run only in a Linux kernel, most can
run either in the kernel or in user space, and there are user-level
elements for reading packets from libpcap or from tcpdump files.
.PP
\&\fBIpsumdump\fR creates and runs a user-level Click configuration.
However, you don't need to install Click to run \fBipsumdump\fR; the
\&\fIlibclick\fR directory contains all the relevant parts of Click, bundled
into a library.
.PP
If you're curious, try running 'ipsumdump \fB\-\-config\fR' with some other
options to see the Click configuration \fBipsumdump\fR would run.
.PP
This is, I think, a pleasant way to write a packet processor!
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
Version 1.0 of the IPSummaryDump \s-1ASCII\s0 file format expressed 'ip_fragoff'
fields in units of 8 bytes.  In version 1.1 and later, these fields are
expressed in bytes.
.PP
Version 1.1 used \f(CW\*(C`W\*(C'\fR for \s-1CWR\s0 in tcp_flags fields.  Early releases in
Version 1.0 versions printed a number between 0 and 255 for tcp_flags, or
used \f(CW\*(C`X\*(C'\fR and \f(CW\*(C`Y\*(C'\fR for \s-1ECE\s0 and \s-1CWR. \s0 Version 1.2 and later uses \f(CW\*(C`C\*(C'\fR for
\&\s-1CWR.\s0
.PP
The names of \f(CW\*(C`!data\*(C'\fR fields were formerly printed in quotes, and could
contain spaces, like the following:
.PP
.Vb 1
\&  !data \*(Aqtimestamp\*(Aq \*(Aqip src\*(Aq \*(Aqsport\*(Aq \*(Aqip dst\*(Aq \*(Aqdport\*(Aq \*(Aqip proto\*(Aq
.Ve
.PP
\&\fBipsumdump\fR still understands files with the old format.
.PP
Version 1.2 could unfortunately contain incorrect \s-1MD5\s0 checksums for packets
with both link-level headers and short payloads, such as pure \s-1TCP\s0
acknowledgments.
.SH "BUGS"
.IX Header "BUGS"
\&\fBIpsumdump\fR can use the \fImmap\fR\|(2) system call to access files, which often
has better performance.  Unfortunately, if \fBipsumdump\fR memory-maps a
corrupt file, it may crash with a segmentation violation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fItcpdump\fR\|(1), \fItcpdpriv\fR\|(1), \fIclick\fR\|(1), \fIipaggcreate\fR\|(1)
.PP
See http://www.read.cs.ucla.edu/click/ for more on Click.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eddie Kohler <kohler@cs.ucla.edu>, based on the Click modular router.
.PP
Extensive feedback and suggestions from Vern Paxson <vern@icir.org>.
Anonymization algorithm from \fItcpdpriv\fR\|(1) by Greg Minshall.
