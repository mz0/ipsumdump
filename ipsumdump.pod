=head1 NAME

ipsumdump - produce ASCII summary of network traffic or tcpdump(1) trace

=head1 SYNOPSIS

ipsumdump [B<-r> | B<-i> | ...] [B<--src>, B<--dst>, B<--sport>, B<--dport>, ...] [other options] [I<files> or I<interfaces>]

=head1 DESCRIPTION

The B<ipsumdump> program reads IP packets from one or more data sources,
then summarizes those packets into a line-based ASCII file. The resulting
summary dump is easy to process with text-based tools. (But see the
B<--binary> option, which generates a smaller binary file.)

Here are a couple lines of B<ipsumdump> output, from 'ipsumdump -sd
/home/kohler/largedump.gz':

  !IPSummaryDump 1.3
  !creator "ipsumdump -sd /home/kohler/largedump.gz"
  !host max.lcdf.org
  !runtime 1000943858.353723 (Wed Sep 19 16:57:38 2001)
  !data ip_src ip_dst
  64.55.139.202 209.247.204.242
  18.26.4.9 64.55.139.202

The 'B<-sd>' option, which is equivalent to 'B<--src --dst>', tells
B<ipsumdump> to log I<s>ource and I<d>estination IP addresses.
'F</home/kohler/largedump.gz>' is a compressed tcpdump(1) file. Each data
line represents a packet; a space separates the two addresses. The
C<!data> comment describes the contents of each data line.

=head1 OPTIONS

=head2 Source Options

Source options tell B<ipsumdump> what kind of data source to use:
L<tcpdump(1)> raw-packet files (B<--tcpdump>), live network interfaces
(B<--interface>), NetFlow summary files (B<--netflow-summary>),
B<ipsumdump> output files (B<--ipsumdump>), DAG or NLANR-formatted files
(B<--dag>, B<--nlanr>), or others.

Non-option arguments specify the files, or interfaces, to read. For
example, 'ipsumdump B<-r> eth0 eth1' will read two tcpdump(1) files, named
"eth0" and "eth1"; 'ipsumdump B<-i> eth0 eth1' will read from two live
network interfaces, "eth0" and "eth1".

Options that read files read from the standard input when you supply a
single dash C<-> as a filename, or when you give no filenames at all.

=over 4

=item B<--tcpdump>, B<-r>

Read from one or more files produced by L<tcpdump(1)>'s B<-w> option (also
known as "pcap files"). Stop when all the files are exhausted. This is the
default. Files (except for standard input) may be compressed by gzip(1) or
bzip2(1); B<ipsumdump> will uncompress them on the fly.

=item B<--interface>, B<-i>

Read from live network interfaces. When run this way, B<ipsumdump> will
continue until interrupted with SIGINT or SIGHUP. When stopped,
B<ipsumdump> appends a comment to its output file, indicating how many
packets were dropped by the kernel before output.

=item B<--ipsumdump>

Read from one or more B<ipsumdump> files. Any packet characteristics not
specified by the input files are set to 0.

=item B<--format>=I<format>

Read from one or more B<ipsumdump> files, using the specified default
format.  The I<format> should be a space-separated list of content types;
see L<ToIPSummaryDump(n)> for a list.

=item B<--dag>[=I<encap>]

Read from one or more DAG-formatted trace files.  For new-style ERF dumps,
which contain encapsulation type information, just say B<--dag>.  For
old-style dumps, you must supply the right I<encap> argument: C<ATM> for
ATM RFC-1483 encapsulation (the most common), C<ETHER> for Ethernet, C<PPP>
for PPP, C<IP> for raw IP, C<HDLC> for Cisco HDLC, C<PPP_HDLC> for PPP
HDLC, or C<SUNATM> for Sun ATM.  See L<http://dag.cs.waikato.ac.nz/>.

=item B<--nlanr>

Read from one or more NLANR-formatted trace files (fr, fr+, or tsh
format).  See L<http://pma.nlanr.net/Traces/>.

=item B<--netflow-summary>

Read from one or more NetFlow summary files. These are line-oriented ASCII
files; blank lines, and lines starting with '!' or '#', are ignored. Other
lines should contain 15 or more fields separated by vertical bars '|'.
B<Ipsumdump> pays attention to some of these fields:

  Field  Meaning                       Example
  -----  ----------------------------  ----------
  0      Source IP address             192.4.1.32
  1      Destination IP address        18.26.4.44
  5      Packet count in flow          5
  6      Byte count in flow            10932
  7      Flow timestamp (UNIX-style)   998006995
  8      Flow end timestamp            998006999
  9      Source port                   3917
  10     Destination port              80
  12     TCP flags (OR of all pkts)    18
  13     IP protocol                   6
  14     IP TOS bits                   0

=item B<--tcpdump-text>

Read from one or more files containing L<tcpdump(1)> textual output.  It's
much better to use the binary files produced by 'tcpdump B<-w>', but if
someone threw those away and all you have is the ASCII output, you can
still make do.  Only works with tcpdump versions 3.7 and earlier.

=back

=head2 Data Options

These options determine the dump's contents. Each data option adds a field
to the output file; you can supply any number of data options. In the
output, fields are separated by spaces. If you say 'B<-sd>',
or the equivalent 'B<--src --dst>', the dump's data lines will contain an
IP source address, a space, and an IP destination address:

    192.168.1.101 18.26.4.44

If you supply no dump content options, B<ipsumdump> will not create a
summary dump. This may be useful if you're only interested in creating a
tcpdump file with B<--write-tcpdump>.

=head3 Generic Options

=over 4

=item B<--timestamp>, B<-t>

Include packet timestamp in the dump. Example: C<1000212480.005813>. For
NetFlow summary input, the packet timestamp equals the flow-end timestamp.
The timestamp has nanosecond precision when input timestamps had nanosecond
precision.

=item B<--first-timestamp>, B<-T>

Include flow-begin timestamp in the dump. Example: C<1000212479.001937>.
This is meaningful only for packet sources that include flow-begin
timestamps, such as NetFlow summaries.

=item B<--packet-count>, B<-c>

Include packet count in the dump.  Some kinds of logs -- such as NetFlow
summary logs -- record information about flows, not packets.  A flow
represents multiple packets; the packet count says exactly how many. 
Example: C<1>.  See also B<--multipacket>, below.

=item B<--wire-length>

Include wire length in the dump.  This is the packet's length in the
capture file, including any link headers and packet trailers.  This is
usually larger than B<--length>, which returns the IP length.

=item B<--link>

Include the link number in the dump.  TSH-format NLANR logs, NetFlow
summary logs, and some IP summary logs can contain a link number.  Example:
C<2>.  For NetFlow summary logs, B<--link> uses the input interface number.

=back

=head3 Ethernet Options

=over 4

=item B<--eth-src>

Include the Ethernet source address in the dump.  Example:
C<00-0A-95-A6-D9-BC>.  Note that Ethernet addresses are only printed for IP
packets.

=item B<--eth-dst>

Include the Ethernet destination address in the dump.  Example:
C<00-0A-95-A6-D9-BC>.  Note that Ethernet addresses are only printed for IP
packets.

=back

=head3 IP Options

=over 4

=item B<--src>, B<-s>

Include IP source address in the dump. Example: C<192.168.1.101>.

=item B<--dst>, B<-d>

Include IP destination address in the dump. Example: C<18.26.4.44>.

=item B<--length>, B<-l>

Include IP packet length in the dump, not including any link-level headers.
Example: C<72>.  See also B<--wire-length>.

=item B<--protocol>, B<-p>

Include IP protocol in the dump. Can be C<T> for TCP, C<U> for UDP,
C<I> for ICMP, or a number for some other protocol.

=item B<--fragment>, B<-g>

Include IP fragment test in the dump. The field value is C<F> for first
fragments, C<f> for second and subsequent fragments, and C<.> (a single
period) for nonfragments.

=item B<--fragment-offset>, B<--fragoff>, B<-G>

Include IP fragment offset in the dump. The field value is the fragment
offset in bytes, possibly followed by a C<+> suffix, indicating the
MF (more fragments) flag. Examples: C<0+> (fragment offset 0, more fragments
forthcoming), C<552> (fragment offset 552, this is the last fragment).

=item B<--ip-id>

Include IP ID field in the dump. Example: C<19371>.

=item B<--ip-sum>

Include IP checksum in the dump.  Example: C<34987>.

=item B<--ip-opt>

Include IP options in the dump. Single IP option fields have the following
representations:

    EOL, NOP        Not written, but FromIPSummaryDump
                    understands 'eol' and 'nop'
    
    RR              'rr{10.0.0.1,20.0.0.2}+5' (addresses
                    inside the braces come before the
		    pointer; '+5' means there is space for
		    5 more addresses after the pointer)
    
    SSRR, LSRR      'ssrr{1.0.0.1,1.0.0.2^1.0.0.3}'
                    ('^' indicates the pointer)
    
    TS              'ts{1,10000,!45}+2++3' (timestamps only
                    [type 0]; timestamp values 1, 10000,
		    and 45 [but 45 has the "nonstandard
		    timestamp" bit set]; the option has
		    room for 2 more timestamps; the
		    overflow counter is set to 3)
		    
		    'ts.ip{1.0.0.1=1,1.0.0.2=2}+5'
		    (timestamps with IP addresses [type 1])
    
		    'ts.preip{1.0.0.1=1^1.0.0.2,1.0.0.3}'
		    (prespecified IP addresses [type 3];
		    the caret is the pointer)
		    
    Other options   '98' (option 98, no data),
                    '99=0:5:10' (option with data, data
		    octets separated by colons)

Multiple options are separated by semicolons. Any invalid option causes the
entire field to be replaced by a single question mark C<?>. A period
C<.> is used for packets with no options (except possibly EOL and NOP).

=item B<--ip-ttl>

Include the IP time-to-live field in the dump.

=item B<--ip-tos>

Include the IP type of service field in the dump.

=item B<--ip-hl>

Include the IP header length in the dump.  The length is measured in bytes.

=item B<--capture-length>

Include the length of captured IP data in the dump. This can be less than
the full IP length (see B<--length>), since many packet capture programs
will store only part of each packet's data.

=back

=head3 Transport Options

=over 4

=item B<--sport>, B<-S>

Include TCP or UDP source port in the dump. Example: C<8928>. For non-TCP
or UDP packets, and for fragments after the first, this field is a single
dash C<->.

=item B<--dport>, B<-D>

Include TCP or UDP destination port in the dump. Example: C<80>.

=item B<--payload-length>, B<-L>

Include length of packet payload in the dump. This is the length of the TCP
or UDP payload, for TCP or UDP packets, or the length of the IP payload,
for other IP packets. Example: C<1000>.

=item B<--payload>

Include the actual packet payload in the dump. This is the TCP or UDP
payload, for TCP or UDP packets, or the IP payload, for other IP packets.
Output as a double-quoted C string; non-ASCII characters, and double-quotes
and backslashes, appear as C backslash escapes. Example: C<",25\r\n\000">.

=item B<--payload-md5>

Include an MD5 checksum of the packet payload in the dump. The payload is
as defined above. In ASCII output, the output is a 22-character string
consisting of characters [a-zA-Z0-9_@]; in binary output, it's a
16-character binary digest. Example: C<sQy@IjqXnFPwZtgtwaC5Hb>.

=item B<--payload-md5-hex>

Like B<--payload-md5>, but in ASCII output, the checksum is printed as 32
hexadecimal digits (the same format used by B<md5sum>). Example:
C<12f6bb1941df66b8f138a446d4e8670c>.

=back

=head3 TCP Options

TCP header fields equal a dash C<-> for non-TCP packets and non-first
fragments.

=over 4

=item B<--tcp-flags>, B<-F>

Include TCP flags byte in the dump. Each flag is represented by an
uppercase letter. Example: C<PA> (PSH and ACK are on, everything else is
off). If no flags are on, the field is C<.> (a single period).

Flag characters are C<F> for FIN, C<S> for SYN, C<R> for RST, C<P> for PSH,
C<A> for ACK, C<U> for URG, C<E> for ECE (flag bit 6), C<C> for CWR (flag
bit 7), and C<N> for Nonce Sum (flag bit 8).

=item B<--tcp-seq>, B<-Q>

Include TCP sequence number in the dump. Example: C<4009339012>.

=item B<--tcp-ack>, B<-K>

Include TCP acknowledgement number in the dump. Example: C<4009339012>.

=item B<--tcp-window>, B<-W>

Include TCP receive window in the dump.  This value is not scaled by the
connection's window scale, if any.  Example: C<480>.

=item B<--tcp-opt>, B<-O>

Include TCP options in the dump. Single TCP option fields have the
following representations:

    EOL, NOP        No representation
    MSS             'mss1400'
    Window scale    'wscale10'
    SACK permitted  'sackok'
    SACK            'sack95-98'; each SACK block
                    is listed separately
    Timestamp       'ts669063908:38382731'
    Other options   '98' (option 98, no data),
                    '99=0:5:10' (option with data, data
		    octets separated by colons)

Multiple options are separated by semicolons. Any invalid option causes the
entire field to be replaced by a single question mark C<?>. A period
C<.> is used for packets with no options (except possibly EOL and NOP).

=item B<--tcp-sack>

Include SACK-related TCP options in the dump, using the format given under
C<--tcp-opt>, above.

=back

=head3 UDP Options

UDP header fields equal a dash C<-> for non-UDP packets and non-first
fragments.

=over 4

=item B<--udp-length>

Include UDP length in the dump. This is the length reported in the UDP
packet header. Example: C<1000>.

=back

=head3 ICMP Options

ICMP header fields equal a dash C<-> for non-ICMP packets and non-first
fragments.

=over 4

=item B<--icmp-type>

Include ICMP type in the dump. Example: C<3>. A dash is output for non-ICMP
packets.

=item B<--icmp-code>

Include ICMP code in the dump. Example: C<8>.

=item B<--icmp-type-name>

Include ICMP type in the dump, using textual names if known. Examples:
C<echo>, C<echo-reply>, C<100>.

=item B<--icmp-code-name>

Include ICMP code in the dump, using textual names if known. Examples:
C<filterprohibited>, C<srcroutefail>, C<reassembly>, C<97>.

=back

=head2 Other Options

=over 4

=item B<--output>=I<file>, B<-o> I<file>

Write the summary dump to I<file> instead of to the standard output.

=item B<--binary>, B<-b>

Write the summary dump in binary format. See below for more information.

=item B<--write-tcpdump>=I<file>, B<-w> I<file>

Write processed packets to a tcpdump(1) I<file> -- or to the standard
output, if I<file> is a single dash C<-> -- in addition to the usual
summary output.  Options including B<--filter> and dump contents require
IP; in the presence of these options, the output tcpdump(1) I<file> will
contain only IP packets.  (ARP packets, for example, will not be written.)

=item B<--no-tcpdump-nano>

The file written for B<--write-tcpdump> will use microsecond-precision
timestamps, rather than nonsecond-precision timestamps (the default).

=item B<--no-payload>

Do not include IP packet payloads in any B<--write-tcpdump> output.

=item B<--filter>=I<filter>, B<-f> I<filter>

Only include packets and flows matching a tcpdump(1) filter. For example,
'ipsumdump B<-f> "tcp && src net 18/8"' will summarize data only for TCP
packets from net 18. (The syntax for I<filter> is currently a subset of
tcpdump's syntax.)

=item B<--bad-packets>

Print lines like C<!bad IP header length 4> for packets with no IP
headers, bad IP headers, or bad TCP/UDP headers. (A bad header has an
incorrect length or unexpected version, or is spread across multiple
fragments.)  The C<!bad> line will immediately precede the normal output
line.  Whether or not B<--bad-packets> is true, a dash C<-> is printed
for any piece of information that came from a bad header, or that came from
a portion of the header that was not captured.

=item B<--anonymize>, B<-A>

Anonymize IP addresses in the output. The anonymization preserves prefix
and class. This means, first, that two anonymized addresses will share the
same prefix when their non-anonymized counterparts share the same prefix;
and second, that anonymized addresses will be in the same class (A, B, C,
or D) as their non-anonymized counterparts. The anonymization algorithm
comes from tcpdpriv(1); it works like 'tcpdpriv B<-A50 -C4>'.

If B<--anonymize> and B<--write-tcpdump> are both on, the B<tcpdump> output
file will have anonymized IP addresses. However, the file will contain
actual packet data, unlike B<tcpdpriv> output.

=item B<--no-promiscuous>

Do not place interfaces into promiscuous mode. Promiscuous mode is the
default.

=item B<--sample>=I<p>

Sample packets with probability I<p>. That is, I<p> is the chance that a
packet will cause output to be generated. The actual probability may differ
from the specified probability, due to fixed point arithmetic; check the
output for a C<!sampling_prob> comment to see the real probability.
Strictly speaking, this option samples records, not packets; so for NetFlow
summaries without B<--multipacket>, it will sample flows.

=item B<--multipacket>

Supply this option if you are reading NetFlow or IP summaries -- files
where each record might represent multiple packets -- and you would like
the output summary to have one line per packet, instead of the default one
line per record. See also B<--packet-count>, above.

=item B<--collate>

Sort output packets by increasing timestamp. Use this option when reading
from multiple tcpdump(1) files to ensure that the output has sorted
timestamps. Combine B<--collate> with B<--write-tcpdump> to collate
overlapping tcpdump(1) files into a single, sorted tcpdump(1) file.

=item B<--interval>=I<time>

Process packets for I<time>, an interval length in seconds (or give a
suffix like '2m' or '1hr'). For B<--interface>, B<ipsumdump> will
quit after it has run for I<time>. For other options, B<ipsumdump> will
quit before writing a packet whose timestamp is more than I<time> seconds
later than the timestamp on the first packet it sees.

=item B<--skip-packets>=I<count>

Skip the first I<count> packets.

=item B<--limit-packets>=I<count>

Output at most I<count> packets, then quit.

=item B<--map-address>=I<addrs>

I<addrs> is a space- or comma-separated list of IP addresses and/or
prefixes. When the summary dump completes, B<ipsumdump> will write those
addresses to the standard error, paired with their anonymized counterparts.

=item B<--record-counts>=I<time>

Useful when reading from interfaces. This option causes B<ipsumdump> to
write a comment recording the cumulative number of packets output, and the
number of packets dropped by the kernel before B<ipsumdump> could process
them, every I<time> seconds. (Or you can say, for example, '2m' for 2
minutes.) A sample comment:

  !counts out 0 kdrop 0

This says that B<ipsumdump> has output 0 records, and the kernel reported 0
packet drops since B<ipsumdump> began.

=item B<--random-seed>=I<seed>

Set the random seed deterministically to I<seed>, an unsigned integer. By
default, the random seed is initialized to a random value using
F</dev/random>, if it exists, combined with other data. The random seed
indirectly determines which packets are sampled, and the values of
anonymized IP addresses.

=item B<--no-mmap>

Do not use memory mapping when reading files. This may prevent crashes if
you feed B<ipsumdump> a corrupted file. See BUGS, below.

=item B<--quiet>, B<-q>

Do not print a progress bar to standard error. This is the default when
B<ipsumdump> isn't running interactively.

=item B<--no-headers>

Do not print the IP summary dump header lines that make the dump
self-describing.

=item B<--config>

Do not produce a summary. Instead, write the Click configuration that
B<ipsumdump> would run to the standard output.

=item B<--verbose>, B<-V>

Produce more verbose error messages.

=item B<--help>, B<-h>

Print a help message to the standard output, then exit.

=item B<--version>, B<-v>

Print version number and license information to the standard output, then
exit.

=back

=head1 SIGNALS

When killed with SIGTERM or SIGINT, B<ipsumdump> will exit cleanly by
flushing its buffers. If you want it to flush its buffers without exiting,
kill it with SIGHUP.

=head1 EXAMPLES

The 'B<-tsSdDp>' option set covers the most commonly useful information
about each packet: timestamp, source address, source port, destination
address, destination port, and protocol. Invoking 'ipsumdump B<-i> eth1
B<-tsSdDp>' might produce output like this:

  !IPSummaryDump 1.3
  !creator "ipsumdump -i eth1 -tsSdDp"
  !host max.lcdf.org
  !runtime 1000967293.569808 (Wed Sep 19 23:28:13 2001)
  !data timestamp ip_src sport ip_dst dport ip_proto
  1000967303.641581 64.71.165.130 80 192.168.1.101 4450 T
  1000967303.670506 64.71.165.130 80 192.168.1.101 4450 T
  1000967303.882621 18.26.4.44 - 192.168.1.101 - I
  1000967304.253874 64.71.165.130 80 192.168.1.101 4442 T
  1000967304.390016 192.150.187.11 53 192.168.1.101 1299 U
  1000967304.425992 207.171.182.16 80 192.168.1.101 4451 T

Here is the same data, anonymized with B<-A>:

  !IPSummaryDump 1.3
  !creator "ipsumdump --ipsumdump -A -tsSdDp"
  !host max.lcdf.org
  !runtime 1000968019.67508 (Wed Sep 19 23:40:19 2001)
  !data timestamp ip_src sport ip_dst dport ip_proto
  1000967303.641581 29.50.142.215 80 204.196.101.50 4450 T
  1000967303.670506 29.50.142.215 80 204.196.101.50 4450 T
  1000967303.882621 89.142.236.79 - 204.196.101.50 - I
  1000967304.253874 29.50.142.215 80 204.196.101.50 4442 T
  1000967304.390016 204.224.59.219 53 204.196.101.50 1299 U
  1000967304.425992 192.230.64.231 80 204.196.101.50 4451 T

=head1 BINARY FORMAT

Binary ipsumdump files begin with several ASCII lines, just like regular
ipsumdump files. The line C<!binary> indicates that the rest of the file,
starting immediately after the newline, consists of binary records. Each
record looks like this:

   +---------------+------------...
   |X|record length|    data
   +---------------+------------...
    <---4 bytes--->

The initial word of data contains the record length in bytes. (All numbers
in the file are stored in network byte order.) The record length includes
the initial word itself, so the minimum valid record length is 4. The
high-order bit C<X> is the metadata indicator. It is zero for regular
packets and one for metadata lines.

Regular packet records have binary fields stored in the order indicated by
the C<!data> line, as follows:

   Field Name     Length  Description
   timestamp         8    timestamp sec, usec
   ntimestamp        8    timestamp sec, nsec
   first_timestamp   8    timestamp sec, usec
   first_ntimestamp  8    timestamp sec, nsec
   ip_src            4    source IP address
   ip_dst            4    destination IP address
   sport             2    source port
   dport             2    destination port
   ip_len            4    IP length field
   ip_proto          1    IP protocol
   ip_id             2    IP ID
   ip_frag           1    fragment descriptor
                          ('F', 'f', or '.')
   ip_fragoff        2    IP fragment offset field
   tcp_seq           4    TCP seqnece number
   tcp_ack           4    TCP ack number
   tcp_flags         1    TCP flags
   tcp_opt           ?    TCP options
   tcp_sack          ?    TCP SACK options
   payload_len       4    payload length
   count             4    packet count

Each field is Length bytes long. Variable-length fields have Length C<?> in
the table; in a packet record, these fields consist of a single length byte,
followed by that many bytes of data.

The data stored in a metadata record is just an ASCII string, ending with
newline, same as in a regular ASCII IPSummaryDump file. C<!bad> records, for
example, are stored this way.

=head1 CLICK

The B<ipsumdump> program uses the Click modular router, an extensible
system for processing packets. Click routers consist of C++ components
called elements. While some elements run only in a Linux kernel, most can
run either in the kernel or in user space, and there are user-level
elements for reading packets from libpcap or from tcpdump files.

B<Ipsumdump> creates and runs a user-level Click configuration.
However, you don't need to install Click to run B<ipsumdump>; the
F<libclick> directory contains all the relevant parts of Click, bundled
into a library.

If you're curious, try running 'ipsumdump B<--config>' with some other
options to see the Click configuration B<ipsumdump> would run.

This is, I think, a pleasant way to write a packet processor!

=head1 COMPATIBILITY

Version 1.0 of the IPSummaryDump ASCII file format expressed 'ip_fragoff'
fields in units of 8 bytes.  In version 1.1 and later, these fields are
expressed in bytes.

Version 1.1 used C<W> for CWR in tcp_flags fields.  Early releases in
Version 1.0 versions printed a number between 0 and 255 for tcp_flags, or
used C<X> and C<Y> for ECE and CWR.  Version 1.2 and later uses C<C> for
CWR.

The names of C<!data> fields were formerly printed in quotes, and could
contain spaces, like the following:

  !data 'timestamp' 'ip src' 'sport' 'ip dst' 'dport' 'ip proto'

B<ipsumdump> still understands files with the old format.

Version 1.2 could unfortunately contain incorrect MD5 checksums for packets
with both link-level headers and short payloads, such as pure TCP
acknowledgments.

=head1 BUGS

B<Ipsumdump> can use the mmap(2) system call to access files, which often
has better performance.  Unfortunately, if B<ipsumdump> memory-maps a
corrupt file, it may crash with a segmentation violation. 

=head1 SEE ALSO

tcpdump(1), tcpdpriv(1), click(1), ipaggcreate(1)

See http://www.read.cs.ucla.edu/click/ for more on Click.

=head1 AUTHOR

Eddie Kohler <kohler@cs.ucla.edu>, based on the Click modular router.

Extensive feedback and suggestions from Vern Paxson <vern@icir.org>.
Anonymization algorithm from tcpdpriv(1) by Greg Minshall.
